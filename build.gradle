import de.undercouch.gradle.tasks.download.Download
import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
	repositories {
		jcenter()
	}
}

plugins {
	id "com.github.johnrengelman.shadow" version "1.2.3"
	id "de.undercouch.download" version "3.1.1"
}

apply from: "https://gradle-files.u-team.info/load-config.gradle"

apply plugin: "java"
apply plugin: "eclipse"

loadConfig()

repositories {
	mavenLocal()
	mavenCentral()
}

group = "info.u-team"
archivesBaseName = "${config.plugin.name}"
version = "${config.plugin.version}"

sourceCompatibility = targetCompatibility = "1.8"

configurations {
	plugin {
		transitive = false
	}
	compileOnly.extendsFrom(plugin)
}

dependencies {
	compile group: "org.spigotmc", name: "spigot-api", version: project.property("apiversion")
	compile group: "org.spigotmc", name: "spigot", version: project.property("apiversion")
}

processResources {
	filter ReplaceTokens, tokens: [
		"apiversion": project.property("apiversion"),
		"version"   : project.property("version")
	]
}

compileJava.dependsOn {
	buildSpigot
}

task setupDevServer(dependsOn: "extractServerJar", type: Copy) {
	from "config/serverfiles"
	into "run"
}

task extractServerJar(type: Copy) {
	from {
		configurations.runtime
	}
	include("spigot-" + project.property("apiversion") + ".jar")
	rename("spigot-" + project.property("apiversion") + ".jar", "server.jar")
	into "run"
}

task copyPluginToTestserver(dependsOn: ["build"], type: Copy) {
	from "${buildDir}/libs"
	into "run/plugins"
}

task extractDependencyPlugins(type: Copy) {
	from {
		configurations.plugin
	}
	into "run/plugins"
}

task prepareDevServer(dependsOn: ["buildSpigot", "setupDevServer", "copyPluginToTestserver", "extractDependencyPlugins"]) {}

task startDevServer(dependsOn: [prepareDevServer], type: JavaExec) {
	classpath configurations.compile, configurations.runtime
	main = "org.bukkit.craftbukkit.Main"
	workingDir = "run"
	standardInput = System.in
}

def spigotBuildDir = new File("$buildDir/spigot/")

task setupWorkspace(dependsOn: ["buildSpigot"]) {
}

task buildSpigot(type: JavaExec) {
	if (hasSpigot()) {
		enabled = false;
		dependsOn = [];
	} else {
		dependsOn = ["cleanSpigotBuild", "downloadBuildTool"]
	}
	main = "-jar"
	args new File(spigotBuildDir, "BuildTools.jar").getAbsolutePath(), "--rev", project.property("apibuildtoolversion")
	workingDir = spigotBuildDir
}

task downloadBuildTool(type: Download) {
	spigotBuildDir.mkdirs()
	src project.property("buildtoolurl")
	dest new File(spigotBuildDir, "BuildTools.jar")
}

task cleanSpigotBuild() {
	spigotBuildDir.deleteDir()
}

def hasSpigot() {
	def groupId = "org.spigotmc"
	def version = project.property("apiversion")
	return hasArtifact(groupId, "spigot-api", version) && hasArtifact(groupId, "spigot", version)
}

def hasArtifact(groupId, artifactId, version) {
	def localMavenRepo = new File(new File(ant.properties["user.home"] as String), ".m2/repository/")
	def file = new File(localMavenRepo, groupId.replace(".", "/") + "/" + artifactId + "/" + version + "/")
	return file.exists()
}